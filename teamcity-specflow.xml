<?xml version="1.0" encoding="UTF-8"?>
<project name="teamcity-specflow" default="all">
  
  
  <property file="teamcity-specflow.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.agent-api.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/agent-api.jar"/>
  </path>
  
  <path id="library.annotations.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/annotations.jar"/>
  </path>
  
  <path id="library.common-api.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/common-api.jar"/>
  </path>
  
  <path id="library.openapi-source.classpath"/>
  
  <path id="library.openapi.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/webapps/ROOT/WEB-INF/lib/openapi.jar"/>
  </path>
  
  <path id="library.server-api.classpath">
    <pathelement location="${path.variable.teamcitydistribution}/devPackage/server-api.jar"/>
  </path>
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module specflow-common -->
  
  <dirname property="module.specflow-common.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.specflow-common" value="${compiler.args}"/>
  
  <property name="specflow-common.output.dir" value="${module.specflow-common.basedir}/out/production/specflow-common"/>
  <property name="specflow-common.testoutput.dir" value="${module.specflow-common.basedir}/out/test/specflow-common"/>
  
  <path id="specflow-common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="specflow-common.module.production.classpath"/>
  
  <path id="specflow-common.runtime.production.module.classpath">
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-common.module.classpath">
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-common.runtime.module.classpath">
    <pathelement location="${specflow-common.testoutput.dir}"/>
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  
  <patternset id="excluded.from.module.specflow-common">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.specflow-common">
    <patternset refid="excluded.from.module.specflow-common"/>
  </patternset>
  
  <path id="specflow-common.module.sourcepath">
    <dirset dir="${module.specflow-common.basedir}/specflow-common">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.specflow-common" depends="compile.module.specflow-common.production,compile.module.specflow-common.tests" description="Compile module specflow-common"/>
  
  <target name="compile.module.specflow-common.production" description="Compile module specflow-common; production classes">
    <mkdir dir="${specflow-common.output.dir}"/>
    <javac destdir="${specflow-common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.specflow-common}"/>
      <bootclasspath refid="specflow-common.module.bootclasspath"/>
      <classpath refid="specflow-common.module.production.classpath"/>
      <src refid="specflow-common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.specflow-common"/>
    </javac>
    
    <copy todir="${specflow-common.output.dir}">
      <fileset dir="${module.specflow-common.basedir}/specflow-common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.specflow-common.tests" depends="compile.module.specflow-common.production" description="compile module specflow-common; test classes" unless="skip.tests"/>
  
  <target name="clean.module.specflow-common" description="cleanup module">
    <delete dir="${specflow-common.output.dir}"/>
    <delete dir="${specflow-common.testoutput.dir}"/>
  </target>
  
  
  <!-- Module specflow-agent -->
  
  <dirname property="module.specflow-agent.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.specflow-agent" value="${compiler.args}"/>
  
  <property name="specflow-agent.output.dir" value="${module.specflow-agent.basedir}/out/production/specflow-agent"/>
  <property name="specflow-agent.testoutput.dir" value="${module.specflow-agent.basedir}/out/test/specflow-agent"/>
  
  <path id="specflow-agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="specflow-agent.module.production.classpath">
    <path refid="library.agent-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.openapi-source.classpath"/>
    <path refid="library.openapi.classpath"/>
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-agent.runtime.production.module.classpath">
    <pathelement location="${specflow-agent.output.dir}"/>
    <path refid="library.agent-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.openapi-source.classpath"/>
    <path refid="library.openapi.classpath"/>
    <path refid="specflow-common.runtime.production.module.classpath"/>
  </path>
  
  <path id="specflow-agent.module.classpath">
    <pathelement location="${specflow-agent.output.dir}"/>
    <path refid="library.agent-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.openapi-source.classpath"/>
    <path refid="library.openapi.classpath"/>
    <pathelement location="${specflow-common.testoutput.dir}"/>
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-agent.runtime.module.classpath">
    <pathelement location="${specflow-agent.testoutput.dir}"/>
    <pathelement location="${specflow-agent.output.dir}"/>
    <path refid="library.agent-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.openapi-source.classpath"/>
    <path refid="library.openapi.classpath"/>
    <path refid="specflow-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.specflow-agent">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.specflow-agent">
    <patternset refid="excluded.from.module.specflow-agent"/>
  </patternset>
  
  <path id="specflow-agent.module.sourcepath">
    <dirset dir="${module.specflow-agent.basedir}/specflow-agent">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.specflow-agent" depends="compile.module.specflow-agent.production,compile.module.specflow-agent.tests" description="Compile module specflow-agent"/>
  
  <target name="compile.module.specflow-agent.production" depends="compile.module.specflow-common" description="Compile module specflow-agent; production classes">
    <mkdir dir="${specflow-agent.output.dir}"/>
    <javac destdir="${specflow-agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.specflow-agent}"/>
      <bootclasspath refid="specflow-agent.module.bootclasspath"/>
      <classpath refid="specflow-agent.module.production.classpath"/>
      <src refid="specflow-agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.specflow-agent"/>
    </javac>
    
    <copy todir="${specflow-agent.output.dir}">
      <fileset dir="${module.specflow-agent.basedir}/specflow-agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.specflow-agent.tests" depends="compile.module.specflow-agent.production" description="compile module specflow-agent; test classes" unless="skip.tests"/>
  
  <target name="clean.module.specflow-agent" description="cleanup module">
    <delete dir="${specflow-agent.output.dir}"/>
    <delete dir="${specflow-agent.testoutput.dir}"/>
  </target>
  
  
  <!-- Module specflow-server -->
  
  <dirname property="module.specflow-server.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.specflow-server" value="${compiler.args}"/>
  
  <property name="specflow-server.output.dir" value="${module.specflow-server.basedir}/out/production/specflow-server"/>
  <property name="specflow-server.testoutput.dir" value="${module.specflow-server.basedir}/out/test/specflow-server"/>
  
  <path id="specflow-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="specflow-server.module.production.classpath">
    <path refid="library.server-api.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-server.runtime.production.module.classpath">
    <pathelement location="${specflow-server.output.dir}"/>
    <path refid="library.server-api.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="specflow-common.runtime.production.module.classpath"/>
  </path>
  
  <path id="specflow-server.module.classpath">
    <pathelement location="${specflow-server.output.dir}"/>
    <path refid="library.server-api.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <pathelement location="${specflow-common.testoutput.dir}"/>
    <pathelement location="${specflow-common.output.dir}"/>
  </path>
  
  <path id="specflow-server.runtime.module.classpath">
    <pathelement location="${specflow-server.testoutput.dir}"/>
    <pathelement location="${specflow-server.output.dir}"/>
    <path refid="library.server-api.classpath"/>
    <path refid="library.common-api.classpath"/>
    <path refid="library.annotations.classpath"/>
    <path refid="specflow-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.specflow-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.specflow-server">
    <patternset refid="excluded.from.module.specflow-server"/>
  </patternset>
  
  <path id="specflow-server.module.sourcepath">
    <dirset dir="${module.specflow-server.basedir}/specflow-server">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.specflow-server" depends="compile.module.specflow-server.production,compile.module.specflow-server.tests" description="Compile module specflow-server"/>
  
  <target name="compile.module.specflow-server.production" depends="compile.module.specflow-common" description="Compile module specflow-server; production classes">
    <mkdir dir="${specflow-server.output.dir}"/>
    <javac destdir="${specflow-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.specflow-server}"/>
      <bootclasspath refid="specflow-server.module.bootclasspath"/>
      <classpath refid="specflow-server.module.production.classpath"/>
      <src refid="specflow-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.specflow-server"/>
    </javac>
    
    <copy todir="${specflow-server.output.dir}">
      <fileset dir="${module.specflow-server.basedir}/specflow-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.specflow-server.tests" depends="compile.module.specflow-server.production" description="compile module specflow-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.specflow-server" description="cleanup module">
    <delete dir="${specflow-server.output.dir}"/>
    <delete dir="${specflow-server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.specflow-common, clean.module.specflow-agent, clean.module.specflow-server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.specflow-common, compile.module.specflow-agent, compile.module.specflow-server" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>